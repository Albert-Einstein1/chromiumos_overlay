diff -u -r orig/xorg-server-1.6.3/glx/glxcmds.c patched/xorg-server-1.6.3/glx/glxcmds.c
--- orig/xorg-server-1.6.3/glx/glxcmds.c	2009-08-01 07:37:53.000000000 +0100
+++ patched/xorg-server-1.6.3/glx/glxcmds.c	2009-12-17 16:20:31.000000000 +0000
@@ -872,6 +872,7 @@
     return Success;
 }
 
+#define __GLX_TOTAL_CONFIG_FIXED (__GLX_MIN_CONFIG_PROPS + 2* 20)
 
 int __glXDisp_GetVisualConfigs(__GLXclientState *cl, GLbyte *pc)
 {
@@ -880,7 +881,7 @@
     xGLXGetVisualConfigsReply reply;
     __GLXscreen *pGlxScreen;
     __GLXconfig *modes;
-    CARD32 buf[__GLX_TOTAL_CONFIG];
+    CARD32 buf[__GLX_TOTAL_CONFIG_FIXED];
     int p, i, err;
     __GLX_DECLARE_SWAP_VARIABLES;
     __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
@@ -889,8 +890,8 @@
 	return err;
 
     reply.numVisuals = pGlxScreen->numVisuals;
-    reply.numProps = __GLX_TOTAL_CONFIG;
-    reply.length = (reply.numVisuals * __GLX_SIZE_CARD32 * __GLX_TOTAL_CONFIG) >> 2;
+    reply.numProps = __GLX_TOTAL_CONFIG_FIXED;
+    reply.length = (reply.numVisuals * __GLX_SIZE_CARD32 * __GLX_TOTAL_CONFIG_FIXED) >> 2;
     reply.type = X_Reply;
     reply.sequenceNumber = client->sequence;
 
@@ -949,19 +950,24 @@
 	buf[p++] = modes->samples;
 	buf[p++] = GLX_SAMPLE_BUFFERS_SGIS;
 	buf[p++] = modes->sampleBuffers;
+	buf[p++] = GLX_Y_INVERTED_EXT;
+	buf[p++] = modes->yInverted;
+	buf[p++] = GLX_BIND_TO_TEXTURE_TARGETS_EXT;
+	buf[p++] = modes->bindToTextureTargets;
+
 	buf[p++] = 0; /* copy over visualSelectGroup (GLX_VISUAL_SELECT_GROUP_SGIX)? */
 	buf[p++] = 0;
 
 	if (client->swapped) {
-	    __GLX_SWAP_INT_ARRAY(buf, __GLX_TOTAL_CONFIG);
+	    __GLX_SWAP_INT_ARRAY(buf, __GLX_TOTAL_CONFIG_FIXED);
 	}
-	WriteToClient(client, __GLX_SIZE_CARD32 * __GLX_TOTAL_CONFIG, 
+	WriteToClient(client, __GLX_SIZE_CARD32 * __GLX_TOTAL_CONFIG_FIXED, 
 		(char *)buf);
     }
     return Success;
 }
 
-#define __GLX_TOTAL_FBCONFIG_ATTRIBS (36)
+#define __GLX_TOTAL_FBCONFIG_ATTRIBS (37)
 #define __GLX_FBCONFIG_ATTRIBS_LENGTH (__GLX_TOTAL_FBCONFIG_ATTRIBS * 2)
 /**
  * Send the set of GLXFBConfigs to the client.  There is not currently
@@ -1049,6 +1055,7 @@
 	WRITE_PAIR( GLX_BIND_TO_TEXTURE_RGBA_EXT, modes->bindToTextureRgba );
 	WRITE_PAIR( GLX_BIND_TO_MIPMAP_TEXTURE_EXT, modes->bindToMipmapTexture );
 	WRITE_PAIR( GLX_BIND_TO_TEXTURE_TARGETS_EXT, modes->bindToTextureTargets );
+	WRITE_PAIR( GLX_Y_INVERTED_EXT, modes->yInverted );
 
 	if (client->swapped) {
 	    __GLX_SWAP_INT_ARRAY(buf, __GLX_FBCONFIG_ATTRIBS_LENGTH);
diff -u -r orig/xorg-server-1.6.3/glx/glxdri2.c patched/xorg-server-1.6.3/glx/glxdri2.c
--- orig/xorg-server-1.6.3/glx/glxdri2.c	2009-08-01 07:37:53.000000000 +0100
+++ patched/xorg-server-1.6.3/glx/glxdri2.c	2009-12-17 16:20:31.000000000 +0000
@@ -72,7 +72,11 @@
     const __DRIdri2Extension *dri2;
     const __DRIcopySubBufferExtension *copySubBuffer;
     const __DRIswapControlExtension *swapControl;
+	// PVR ----------------------------------------
     const __DRItexBufferExtension *texBuffer;
+	const __DRItexBufferExtensionPvr *texBufferPvr;
+    const __DRIpvrExtension *pvr;
+	// PVR ----------------------------------------
 
     unsigned char glx_enable_bits[__GLX_EXT_BYTES];
 };
@@ -122,6 +126,11 @@
     BoxRec box;
     RegionRec region;
 
+	// PVR ----------------------------------------
+	if( private->screen->pvr != 0 )
+		(*private->screen->pvr->copySubBufferPrepare)(private->driDrawable,x,y,w,h);
+	// PVR ----------------------------------------
+
     box.x1 = x;
     box.y1 = private->height - y - h;
     box.x2 = x + w;
@@ -250,25 +259,30 @@
 {
     __GLXDRIdrawable *drawable = (__GLXDRIdrawable *) glxPixmap;
     const __DRItexBufferExtension *texBuffer = drawable->screen->texBuffer;
+    const __DRItexBufferExtensionPvr *texBufferPvr = drawable->screen->texBufferPvr;
     __GLXDRIcontext *context = (__GLXDRIcontext *) baseContext;
 
-    if (texBuffer == NULL)
+    if (texBufferPvr != NULL) {
+		(*texBufferPvr->setTexBuffer)(context->driContext,
+				    glxPixmap->target,
+				    glxPixmap->format,
+				    drawable->driDrawable);
         return Success;
-
+	} else if(texBuffer != NULL) {
 #if __DRI_TEX_BUFFER_VERSION >= 2
-    if (texBuffer->base.version >= 2 && texBuffer->setTexBuffer2 != NULL) {
-	(*texBuffer->setTexBuffer2)(context->driContext,
+	    if (texBuffer->base.version >= 2 && texBuffer->setTexBuffer2 != NULL) {
+			(*texBuffer->setTexBuffer2)(context->driContext,
 				    glxPixmap->target,
 				    glxPixmap->format,
 				    drawable->driDrawable);
-    } else
+	    } else
 #endif
-    {
-	texBuffer->setTexBuffer(context->driContext,
+	    {
+			texBuffer->setTexBuffer(context->driContext,
 				glxPixmap->target,
 				drawable->driDrawable);
-    }
-
+	    }
+	}
     return Success;
 }
 
@@ -277,8 +291,22 @@
 			int buffer,
 			__GLXdrawable *pixmap)
 {
-    /* FIXME: Just unbind the texture? */
+	// PVR ----------------------------------------
+    __GLXDRIdrawable *drawable = (__GLXDRIdrawable *) pixmap;
+    const __DRItexBufferExtensionPvr *texBufferPvr = drawable->screen->texBufferPvr;
+    __GLXDRIcontext *context = (__GLXDRIcontext *) baseContext;
+
+    if (texBufferPvr == NULL)
+        return Success;
+
+	texBufferPvr->releaseTexBuffer(context->driContext,
+				pixmap->target,
+				pixmap->format,
+				drawable->driDrawable);
+
+
     return Success;
+	// PVR ----------------------------------------
 }
 
 #else
@@ -572,6 +600,23 @@
 	    LogMessage(X_INFO, "AIGLX: GLX_EXT_texture_from_pixmap backed by buffer objects\n");
 	}
 #endif
+
+#ifdef __DRI_TEX_BUFFER
+	if (strcmp(extensions[i]->name, __DRI_TEX_BUFFER_PVR) == 0) {
+	    screen->texBufferPvr = (const __DRItexBufferExtensionPvr *) extensions[i];
+	    /* GLX_EXT_texture_from_pixmap is always enabled. */
+	    LogMessage(X_INFO, "AIGLX: GLX_EXT_texture_from_pixmap backed by buffer objects\n");
+	}
+#endif
+
+	// PVR ----------------------------------------
+    if (strcmp(extensions[i]->name, __DRI_PVR) == 0 &&
+	    extensions[i]->version >= __DRI_PVR_VERSION) {
+		screen->pvr = (const __DRIpvrExtension *) extensions[i];
+	    LogMessage(X_INFO, "AIGLX: PVR fixes loaded\n");
+	}
+	// PVR ----------------------------------------
+
 	/* Ignore unknown extensions */
     }
 }
diff -u -r orig/xorg-server-1.6.3/hw/xfree86/dri2/dri2.c patched/xorg-server-1.6.3/hw/xfree86/dri2/dri2.c
--- orig/xorg-server-1.6.3/hw/xfree86/dri2/dri2.c	2009-08-01 07:37:53.000000000 +0100
+++ patched/xorg-server-1.6.3/hw/xfree86/dri2/dri2.c	2009-12-16 17:23:57.000000000 +0000
@@ -359,7 +359,7 @@
      * contents of the real front-buffer.  This ensures correct operation of
      * applications that call glXWaitX before calling glDrawBuffer.
      */
-    if (have_fake_front) {
+    /*if (have_fake_front) {
 	BoxRec box;
 	RegionRec region;
 
@@ -371,7 +371,7 @@
 
 	DRI2CopyRegion(pDraw, &region, DRI2BufferFakeFrontLeft,
 		       DRI2BufferFrontLeft);
-    }
+			   }*/
 
     return pPriv->buffers;
 }
